//
//  ProductManagementView.swift
//  Lopan
//
//  Created by Bobo on 2025/7/28.
//

import SwiftUI
import SwiftData
import PhotosUI
import UniformTypeIdentifiers

struct ProductManagementView: View {
    @EnvironmentObject private var serviceFactory: ServiceFactory
    
    private var productRepository: ProductRepository {
        serviceFactory.repositoryFactory.productRepository
    }
    
    @State private var products: [Product] = []
    @State private var productSizes: [ProductSize] = []
    
    @State private var showingAddProduct = false
    @State private var showingExcelImport = false
    @State private var showingExcelExport = false
    @State private var searchText = ""
    @State private var isSearching = false
    @State private var selectedProducts: Set<String> = []
    @State private var isBatchMode = false
    @State private var showingDeleteAlert = false
    @State private var productsToDelete: [Product] = []
    
    // Sorting option (simplified)
    @State private var sortOption: ProductSortOption = .name
    
    enum ProductSortOption: String, CaseIterable {
        case name = "名称"
        case createdDate = "创建时间"
    }
    
    var filteredProducts: [Product] {
        var filtered = products
        
        // 文本搜索过滤
        if !searchText.isEmpty {
            filtered = filtered.filter { product in
                product.name.localizedCaseInsensitiveContains(searchText) ||
                product.colors.contains { color in
                    color.localizedCaseInsensitiveContains(searchText)
                } ||
                product.sizeNames.contains { size in
                    size.localizedCaseInsensitiveContains(searchText)
                }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
        
        // 排序
        switch sortOption {
        case .name:
            return filtered.sorted { $0.name < $1.name }
        case .createdDate:
            return filtered.sorted { $0.createdAt > $1.createdAt }
        }
    }
    
    var body: some View {
        ZStack(alignment: .bottomTrailing) {
            VStack {
                // Search and toolbar
                searchAndToolbarView
                
                // Product list
                productListView
            }
            
            // Floating Action Button
            floatingActionButton
                .padding(.trailing, 20)
                .padding(.bottom, 34) // Account for safe area
        }
        .navigationTitle("产品管理")
        .navigationBarTitleDisplayMode(.inline)
        .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
                Menu {
                    Button(action: { showingExcelImport = true }) {
                        Label("导入数据", systemImage: "square.and.arrow.down")
                    }
                    
                    Button(action: { showingExcelExport = true }) {
                        Label("导出数据", systemImage: "square.and.arrow.up")
                    }
                } label: {
                    Image(systemName: "ellipsis.circle")
                        .font(.body)
                        .foregroundColor(LopanColors.primary)
                }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
        .sheet(isPresented: $showingAddProduct) {
            ModernAddProductView()
        }
        .adaptiveBackground()
        .onAppear {
            loadData()
        }
        .onReceive(NotificationCenter.default.publisher(for: .productAdded)) { _ in
            loadData()
        }
        .onReceive(NotificationCenter.default.publisher(for: .productUpdated)) { _ in
            loadData()
        }
        .onReceive(NotificationCenter.default.publisher(for: .productDeleted)) { _ in
            loadData()
        }
        .sheet(isPresented: $showingExcelImport) {
            ExcelImportView(dataType: .products)
        }
        .sheet(isPresented: $showingExcelExport) {
            ExcelExportView(dataType: .products)
        }
        .alert("确认删除", isPresented: $showingDeleteAlert) {
            Button("取消", role: .cancel) { }
            Button("删除", role: .destructive) {
                deleteSelectedProducts()
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        ) message: {
            Text("确定要删除选中的 \(productsToDelete.count) 个产品吗？此操作不可撤销。")
        }
    }
    
    private var searchAndToolbarView: some View {
        VStack(spacing: 12) {
            // Enhanced search bar with batch button
            HStack(spacing: 12) {
                HStack {
                    Image(systemName: "magnifyingglass")
                        .foregroundColor(LopanColors.textSecondary)
                        .font(.system(size: 16, weight: .medium))
                    
                    TextField("搜索产品名称、颜色或尺寸", text: $searchText)
                        .font(.body)
                        .foregroundColor(LopanColors.textPrimary)
                        .onChange(of: searchText) { _, newValue in
                            isSearching = !newValue.isEmpty
                        }
                    
                    if isSearching {
                        Button(action: {
                            searchText = ""
                            isSearching = false
                        }) {
                            Image(systemName: "xmark.circle.fill")
                                .foregroundColor(LopanColors.textSecondary)
                                .font(.system(size: 16, weight: .medium))
                        }
                    }
                }
                .padding(.horizontal, 14)
                .padding(.vertical, 10)
                .background(Color.white)
                .cornerRadius(10)
                .shadow(color: Color.black.opacity(0.05), radius: 1, x: 0, y: 1)
                .animation(.easeInOut(duration: 0.2), value: isSearching)
                
                // Batch operation button - now with icon
                Button(action: { toggleBatchMode() }) {
                    Image(systemName: isBatchMode ? "checkmark" : "checklist.unchecked")
                        .font(.system(size: 18, weight: .medium))
                }
                .frame(width: 44, height: 44)
                .background(Color.white)
                .foregroundColor(isBatchMode ? LopanColors.success : LopanColors.primary)
                .cornerRadius(10)
                .shadow(color: Color.black.opacity(0.05), radius: 1, x: 0, y: 1)
                .disabled(filteredProducts.isEmpty)
            }
            .padding(.horizontal)
            .accessibilityLabel("搜索产品")
            .accessibilityHint("输入产品名称、颜色或尺寸进行搜索")
            
            // Batch Mode Toolbar
            if isBatchMode {
                HStack {
                    Button(action: { 
                        productsToDelete = products.filter { selectedProducts.contains($0.id) }
                        showingDeleteAlert = true
                    }) {
                        Label("删除", systemImage: "trash")
                    }
                    .buttonStyle(.borderedProminent)
                    .foregroundColor(.white)
                    .tint(LopanColors.error)
                    .disabled(selectedProducts.isEmpty)
                    
                    Spacer()
                    
                    Text("\(selectedProducts.count)/\(filteredProducts.count) 项已选")
                        .font(.caption)
                        .fontWeight(.medium)
                        .foregroundColor(LopanColors.textPrimary)
                    
                    Spacer()
                    
                    if selectedProducts.count == filteredProducts.count && !filteredProducts.isEmpty {
                        Button("取消全选") {
                            selectedProducts.removeAll()
                        }
                        .buttonStyle(.bordered)
                        .foregroundColor(LopanColors.primary)
                    } else {
                        Button("全选") {
                            selectedProducts = Set(filteredProducts.map { $0.id })
                        }
                        .buttonStyle(.bordered)
                        .foregroundColor(LopanColors.primary)
                        .disabled(filteredProducts.isEmpty)
                    }
                }
                .padding(.horizontal)
                .padding(.vertical, 12)
                .background(LopanColors.backgroundSecondary)
                .cornerRadius(12)
                .padding(.horizontal)
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
        .padding(.vertical, 8)
        .background(LopanColors.background)
    }
    
    // MARK: - Floating Action Button
    private var floatingActionButton: some View {
        Button(action: { 
            let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
            impactFeedback.impactOccurred()
            showingAddProduct = true
        }) {
            Image(systemName: "plus")
                .font(.system(size: 24, weight: .medium))
                .foregroundColor(.white)
                .frame(width: 56, height: 56)
                .background(LopanColors.primary)
                .clipShape(Circle())
                .shadow(color: LopanColors.primary.opacity(0.3), radius: 8, x: 0, y: 4)
        }
        .scaleEffect(isBatchMode ? 0.8 : 1.0)
        .opacity(isBatchMode ? 0.6 : 1.0)
        .disabled(isBatchMode)
        .animation(.easeInOut(duration: 0.2), value: isBatchMode)
        .accessibilityLabel("添加新产品")
        .accessibilityHint("点击添加新的产品到系统中")
    }
    
    private var productListView: some View {
        Group {
            if filteredProducts.isEmpty {
                emptyStateView
            } else {
                List {
                    ForEach(filteredProducts) { product in
                        Group {
                            if isBatchMode {
                                ProductRowView(
                                    product: product,
                                    isSelected: selectedProducts.contains(product.id),
                                    isBatchMode: isBatchMode,
                                    onSelect: { toggleProductSelection(product) }
                                )
                            } else {
                                NavigationLink(destination: ProductDetailView(product: product)) {
                                    ProductRowView(
                                        product: product,
                                        isSelected: false,
                                        isBatchMode: false,
                                        onSelect: {}
                                    )
                                }
                                .buttonStyle(PlainButtonStyle())
                            }
                        }
                        .listRowSeparator(.hidden)
                        .listRowBackground(Color.clear)
                        .listRowInsets(EdgeInsets(top: 4, leading: 16, bottom: 4, trailing: 16))
                    }
                }
                .listStyle(.plain)
                .background(LopanColors.background)
                .scrollContentBackground(.hidden)
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
    }
    
    private var emptyStateView: some View {
        VStack(spacing: 24) {
            Image(systemName: isSearching ? "magnifyingglass" : "cube.box")
                .font(.system(size: 48, weight: .light))
                .foregroundColor(LopanColors.textSecondary)
            
            VStack(spacing: 8) {
                Text(isSearching ? "未找到匹配产品" : "暂无产品")
                    .font(.headline)
                    .foregroundColor(LopanColors.textPrimary)
                
                Text(isSearching ? "尝试调整搜索条件" : "点击右下角的 + 按钮添加第一个产品")
                    .font(.body)
                    .foregroundColor(LopanColors.textSecondary)
                    .multilineTextAlignment(.center)
            }
            
            if isSearching {
                Button("清除搜索") {
                    searchText = ""
                    isSearching = false
                }
                .buttonStyle(.borderedProminent)
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
        .padding(40)
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(LopanColors.background)
    }
    
    private func toggleBatchMode() {
        let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
        impactFeedback.impactOccurred()
        
        withAnimation(.easeInOut(duration: 0.3)) {
            isBatchMode.toggle()
            if !isBatchMode {
                selectedProducts.removeAll()
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
    }
    
    private func toggleProductSelection(_ product: Product) {
        if isBatchMode {
            let impactFeedback = UIImpactFeedbackGenerator(style: .light)
            impactFeedback.impactOccurred()
            
            if selectedProducts.contains(product.id) {
                selectedProducts.remove(product.id)
            } else {
                selectedProducts.insert(product.id)
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
    }
    
    private func colorForName(_ colorName: String) -> Color {
        let lowercased = colorName.lowercased()
        switch lowercased {
        case "红色", "红", "red": return .red
        case "蓝色", "蓝", "blue": return .blue
        case "绿色", "绿", "green": return .green
        case "黄色", "黄", "yellow": return .yellow
        case "橙色", "橙", "orange": return .orange
        case "紫色", "紫", "purple": return .purple
        case "粉色", "粉", "pink": return .pink
        case "黑色", "黑", "black": return .black
        case "白色", "白", "white": return .white
        case "灰色", "灰", "gray", "grey": return .gray
        case "棕色", "棕", "brown": return Color(.systemBrown)
        case "深蓝色", "深蓝", "navy", "dark blue": return Color(.systemBlue).opacity(0.7)
        case "浅蓝色", "浅蓝", "light blue": return Color(.systemBlue).opacity(0.3)
        case "军绿色", "军绿", "olive": return Color(.systemGreen).opacity(0.6)
        case "米色", "米", "beige": return Color(.systemBrown).opacity(0.3)
        case "格子": return Color(.systemGray2)
        default: return Color(.systemGray3)
        }
    }
    
    private func deleteProduct(_ product: Product) {
        productsToDelete = [product]
        showingDeleteAlert = true
    }
    
    private func loadData() {
        Task {
            do {
                products = try await productRepository.fetchProducts()
            } catch {
                print("Error loading products: \(error)")
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
    }
    
    private func deleteSelectedProducts() {
        let productsToDelete = products.filter { selectedProducts.contains($0.id) }
        
        Task {
            do {
                for product in productsToDelete {
                    try await productRepository.deleteProduct(product)
                }
                
                selectedProducts.removeAll()
                isBatchMode = false
                
                // Send notification that products were deleted
                NotificationCenter.default.post(name: .productDeleted, object: nil)
                
                // Reload products after deletion
                loadData()
            } catch {
                print("Failed to delete products: \(error)")
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
    }
    
}

struct ProductRowView: View {
    let product: Product
    let isSelected: Bool
    let isBatchMode: Bool
    let onSelect: () -> Void
    
    private func colorForName(_ colorName: String) -> Color {
        let lowercased = colorName.lowercased()
        switch lowercased {
        case "红色", "红", "red": return .red
        case "蓝色", "蓝", "blue": return .blue
        case "绿色", "绿", "green": return .green
        case "黄色", "黄", "yellow": return .yellow
        case "橙色", "橙", "orange": return .orange
        case "紫色", "紫", "purple": return .purple
        case "粉色", "粉", "pink": return .pink
        case "黑色", "黑", "black": return .black
        case "白色", "白", "white": return .white
        case "灰色", "灰", "gray", "grey": return .gray
        case "棕色", "棕", "brown": return Color(.systemBrown)
        case "深蓝色", "深蓝", "navy", "dark blue": return Color(.systemBlue).opacity(0.7)
        case "浅蓝色", "浅蓝", "light blue": return Color(.systemBlue).opacity(0.3)
        case "军绿色", "军绿", "olive": return Color(.systemGreen).opacity(0.6)
        case "米色", "米", "beige": return Color(.systemBrown).opacity(0.3)
        case "格子": return Color(.systemGray2)
        default: return Color(.systemGray3)
        }
    }
    
    var body: some View {
        HStack(spacing: 16) {
            selectionCheckbox
            productImage
            productInfoView
            Spacer()
            
            if !isBatchMode {
                Image(systemName: "chevron.right")
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(LopanColors.textSecondary)
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
        .padding(16)
        .background(backgroundView)
        .scaleEffect(isSelected ? 1.02 : 1.0)
        .animation(.easeInOut(duration: 0.2), value: isSelected)
        .accessibilityElement(children: .combine)
        .accessibilityLabel("\(product.name), \(product.colors.joined(separator: ", "))")
    }
    
    @ViewBuilder
    private var selectionCheckbox: some View {
        if isBatchMode {
            Button(action: onSelect) {
                Image(systemName: isSelected ? "checkmark.circle.fill" : "circle")
                    .foregroundColor(isSelected ? LopanColors.primary : LopanColors.textSecondary)
                    .font(.title2)
            }
            .buttonStyle(PlainButtonStyle())
            .accessibilityLabel(isSelected ? "取消选择" : "选择此产品")
        }
    }
    
    private var productInfoView: some View {
        VStack(alignment: .leading, spacing: 10) {
            Text(product.name)
                .font(.headline)
                .fontWeight(.semibold)
                .foregroundColor(LopanColors.textPrimary)
            
            productColorsView
            productSizesView
        }
    }
    
    @ViewBuilder
    private var productColorsView: some View {
        if !product.colors.isEmpty {
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 6) {
                    ForEach(product.colors.prefix(3), id: \.self) { color in
                        HStack(spacing: 4) {
                            Circle()
                                .fill(colorForName(color))
                                .frame(width: 12, height: 12)
                                .overlay(
                                    Circle().stroke(Color.black.opacity(0.2), lineWidth: 0.5)
                                )
                            LopanBadge(color, style: .neutral, size: .small)
                        }
                    }
                    if product.colors.count > 3 {
                        LopanBadge("+\(product.colors.count - 3)", style: .outline, size: .small)
                    }
                }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        ) else {
            Text("暂无颜色")
                .font(.caption)
                .foregroundColor(LopanColors.textSecondary)
        }
    }
    
    @ViewBuilder
    private var productSizesView: some View {
        if let sizes = product.sizes, !sizes.isEmpty {
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 6) {
                    ForEach(sizes.prefix(4)) { size in
                        LopanBadge(size.size, style: .secondary, size: .small)
                    }
                    if sizes.count > 4 {
                        LopanBadge("+\(sizes.count - 4)", style: .outline, size: .small)
                    }
                }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        ) else {
            Text("暂无尺寸")
                .font(.caption)
                .foregroundColor(LopanColors.textSecondary)
        }
    }
    
    private var backgroundView: some View {
        RoundedRectangle(cornerRadius: 12)
            .fill(isSelected ? LopanColors.primary.opacity(0.1) : Color.white)
            .shadow(
                color: isSelected ? LopanColors.primary.opacity(0.2) : Color.black.opacity(0.05),
                radius: isSelected ? 8 : 2,
                x: 0,
                y: isSelected ? 4 : 1
            )
    }
    
    private var productImage: some View {
        Group {
            if let imageData = product.imageData, let uiImage = UIImage(data: imageData) {
                // 本地图片数据
                Image(uiImage: uiImage)
                    .resizable()
                    .scaledToFill()
                    .frame(width: 64, height: 64)
                    .clipShape(RoundedRectangle(cornerRadius: 12))
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(LopanColors.border, lineWidth: 0.5)
                    )
            } else {
                // 占位符
                RoundedRectangle(cornerRadius: 12)
                    .fill(LopanColors.backgroundTertiary)
                    .frame(width: 64, height: 64)
                    .overlay(
                        Image(systemName: "cube.box.fill")
                            .font(.title2)
                            .foregroundColor(LopanColors.textSecondary)
                    )
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(LopanColors.border, lineWidth: 0.5)
                    )
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
    }
}

// MARK: - Product Detail View
struct ProductDetailView: View {
    @Environment(\.modelContext) private var modelContext
    @Environment(\.dismiss) private var dismiss
    let product: Product
    
    @State private var showingEditSheet = false
    
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                productInfoView
                sizesView
            }
            .padding(.horizontal, 20)
            .padding(.bottom, 20)
        }
        .background(LopanColors.background)
        .navigationTitle("产品详情")
        .navigationBarTitleDisplayMode(.inline)
        .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
                Button {
                    showingEditSheet = true
                } label: {
                    Image(systemName: "pencil")
                        .font(.body)
                        .foregroundColor(LopanColors.primary)
                }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
        .sheet(isPresented: $showingEditSheet) {
            EditProductView(product: product)
        }
    }
    
    private var productInfoView: some View {
        VStack(alignment: .leading, spacing: 20) {
            Text("产品信息")
                .font(.title2)
                .fontWeight(.bold)
                .foregroundColor(LopanColors.textPrimary)
            
                HStack(spacing: 20) {
                    // Product image
                    Group {
                        if let imageData = product.imageData, let uiImage = UIImage(data: imageData) {
                            Image(uiImage: uiImage)
                                .resizable()
                                .scaledToFill()
                                .frame(width: 100, height: 100)
                                .clipShape(RoundedRectangle(cornerRadius: 12))
                                .overlay(
                                    RoundedRectangle(cornerRadius: 12)
                                        .stroke(LopanColors.border, lineWidth: 0.5)
                                )
                        } else {
                            RoundedRectangle(cornerRadius: 12)
                                .fill(LopanColors.backgroundTertiary)
                                .frame(width: 100, height: 100)
                                .overlay(
                                    VStack(spacing: 4) {
                                        Image(systemName: "photo")
                                            .font(.title2)
                                            .foregroundColor(LopanColors.textSecondary)
                                        Text("无图片")
                                            .font(.caption)
                                            .foregroundColor(LopanColors.textSecondary)
                                    }
                                )
                                .overlay(
                                    RoundedRectangle(cornerRadius: 12)
                                        .stroke(LopanColors.border, lineWidth: 0.5)
                                )
                        }
                    }
                
                    VStack(alignment: .leading, spacing: 12) {
                        Text(product.name)
                            .font(.title)
                            .fontWeight(.bold)
                            .foregroundColor(LopanColors.textPrimary)
                        
                        VStack(alignment: .leading, spacing: 8) {
                            Text("颜色")
                                .font(.subheadline)
                                .fontWeight(.semibold)
                                .foregroundColor(LopanColors.textPrimary)
                            
                            if !product.colors.isEmpty {
                                LazyVGrid(columns: [
                                    GridItem(.flexible()),
                                    GridItem(.flexible())
                                ], spacing: 6) {
                                    ForEach(product.colors, id: \.self) { color in
                                        LopanBadge(color, style: .neutral, size: .small)
                                    }
                                }
                            } else {
                                Text("暂无颜色")
                                    .font(.body)
                                    .foregroundColor(LopanColors.textSecondary)
                            }
                        }
                        
                        Text("创建时间: \(product.createdAt, style: .date)")
                            .font(.caption)
                            .foregroundColor(LopanColors.textSecondary)
                    }
                
                    Spacer()
                }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
    }
    
    private var sizesView: some View {
        LopanCard(variant: .elevated) {
            VStack(alignment: .leading, spacing: 16) {
                Text("可用尺寸")
                    .font(.title2)
                    .fontWeight(.bold)
                    .foregroundColor(LopanColors.textPrimary)
            
                if let sizes = product.sizes, !sizes.isEmpty {
                    LazyVGrid(columns: [
                        GridItem(.flexible()),
                        GridItem(.flexible()),
                        GridItem(.flexible()),
                        GridItem(.flexible())
                    ], spacing: 12) {
                        ForEach(sizes) { size in
                            LopanBadge(size.size, style: .secondary, size: .medium)
                        }
                    }
                } else {
                    HStack {
                        Image(systemName: "ruler")
                            .foregroundColor(LopanColors.textSecondary)
                        Text("暂无尺寸信息")
                            .foregroundColor(LopanColors.textSecondary)
                    }
                    .padding(.vertical, 8)
                }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
    }
    
}

// MARK: - Edit Product View
struct EditProductView: View {
    @Environment(\.modelContext) private var modelContext
    @Environment(\.dismiss) private var dismiss
    let product: Product
    
    @State private var name: String
    @State private var colors: [String]
    @State private var newColor: String = ""
    @State private var imageData: Data?
    @State private var selectedImage: PhotosPickerItem?
    @State private var sizes: [String]
    @State private var newSize: String = ""
    
    init(product: Product) {
        self.product = product
        _name = State(initialValue: product.name)
        _colors = State(initialValue: product.colors)
        _imageData = State(initialValue: product.imageData)
        _sizes = State(initialValue: product.sizeNames)
    }
    
    var body: some View {
        ModernNavigationView {
            Form {
                Section("产品信息") {
                    TextField("产品名称", text: $name)
                    
                    VStack(alignment: .leading, spacing: 8) {
                        Text("产品颜色")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        
                        HStack {
                            TextField("添加颜色", text: $newColor)
                            Button("添加") {
                                addColor()
                            }
                            .disabled(newColor.isEmpty)
                        }
                        
                        if !colors.isEmpty {
                            ScrollView(.horizontal, showsIndicators: false) {
                                HStack(spacing: 8) {
                                    ForEach(colors, id: \.self) { color in
                                        HStack {
                                            Text(color)
                                                .font(.caption)
                                                .padding(.horizontal, 8)
                                                .padding(.vertical, 4)
                                                .background(Color.blue.opacity(0.1))
                                                .foregroundColor(.blue)
                                                .cornerRadius(6)
                                            
                                            Button("×") {
                                                removeColor(color)
                                            }
                                            .font(.caption)
                                            .foregroundColor(.red)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
                Section("产品图片") {
                    HStack {
                        if let imageData = imageData, let uiImage = UIImage(data: imageData) {
                            Image(uiImage: uiImage)
                                .resizable()
                                .scaledToFit()
                                .frame(width: 80, height: 80)
                                .cornerRadius(8)
                        } else {
                            RoundedRectangle(cornerRadius: 8)
                                .fill(Color.gray.opacity(0.2))
                                .frame(width: 80, height: 80)
                                .overlay(
                                    Image(systemName: "photo")
                                        .font(.title2)
                                        .foregroundColor(.gray)
                                )
                        }
                        
                        VStack(alignment: .leading, spacing: 8) {
                            PhotosPicker(selection: $selectedImage, matching: .images) {
                                Label("选择图片", systemImage: "photo")
                            }
                            
                            if imageData != nil {
                                Button("删除图片") {
                                    imageData = nil
                                    selectedImage = nil
                                }
                                .foregroundColor(.red)
                            }
                        }
                    }
                }
                
                Section("产品尺寸") {
                    HStack {
                        TextField("新尺寸", text: $newSize)
                        Button("添加") {
                            if !newSize.isEmpty && !sizes.contains(newSize) {
                                sizes.append(newSize)
                                newSize = ""
                            }
                        }
                        .disabled(newSize.isEmpty)
                    }
                    
                    ForEach(sizes, id: \.self) { size in
                        HStack {
                            Text(size)
                            Spacer()
                            Button("删除") {
                                sizes.removeAll { $0 == size }
                            }
                            .foregroundColor(.red)
                        }
                    }
                }
            }
            .navigationTitle("编辑产品")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("取消") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("保存") {
                        saveChanges()
                    }
                    .disabled(name.isEmpty || colors.isEmpty)
                }
            }
            .onChange(of: selectedImage) { _, newValue in
                Task {
                    if let data = try? await newValue?.loadTransferable(type: Data.self) {
                        imageData = data
                    }
                }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
    }
    
    private func addColor() {
        let trimmedColor = newColor.trimmingCharacters(in: .whitespacesAndNewlines)
        if !trimmedColor.isEmpty && !colors.contains(trimmedColor) {
            colors.append(trimmedColor)
            newColor = ""
        }
    }
    
    private func removeColor(_ color: String) {
        colors.removeAll { $0 == color }
    }
    
    private func saveChanges() {
        product.name = name
        product.colors = colors
        product.imageData = imageData
        product.updatedAt = Date()
        
        // Update sizes
        if let existingSizes = product.sizes {
            // Remove sizes that are no longer in the list
            for size in existingSizes {
                if !sizes.contains(size.size) {
                    modelContext.delete(size)
                }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
        
        // Add new sizes
        for sizeName in sizes {
            if !(product.sizes?.contains { $0.size == sizeName } ?? false) {
                let newSize = ProductSize(size: sizeName, product: product)
                modelContext.insert(newSize)
                if product.sizes == nil {
                    product.sizes = []
                }
                product.sizes?.append(newSize)
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.05), radius: 2, x: 0, y: 1)
        )
        
        do {
            try modelContext.save()
            NotificationCenter.default.post(name: .productUpdated, object: product)
            dismiss()
        } catch {
            print("Error saving product: \(error)")
        }
    }
}



#Preview {
    ProductManagementView()
        .modelContainer(for: [Product.self, ProductSize.self], inMemory: true)
} 
